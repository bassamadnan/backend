name: Run Tests

on:
  pull_request:
    branches: [main]

jobs:
  run-tests:
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
      REFRESH_TOKEN_EXPIRE_MINUTES: ${{ secrets.REFRESH_TOKEN_EXPIRE_MINUTES }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_REFRESH_SECRET_KEY: ${{ secrets.JWT_REFRESH_SECRET_KEY }}
      MOBIUS_URL: ${{ secrets.MOBIUS_URL }}
      MOBIUS_USERNAME: ${{ secrets.MOBIUS_USERNAME }}
      MOBIUS_PASSWORD: ${{ secrets.MOBIUS_PASSWORD }}
      WORKERS: ${{ secrets.WORKERS }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          pip install httpx
          pip install python-multipart
          
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Start test environment
        run: |
          if [ -f .env ]; then
            echo ".env file exists, making a backup"
            cp .env .env.bak
          fi
          cp tests/.env.test .env
          cd tests
          docker-compose -f ./compose/mobius-compose.yml up -d
          echo "mobius docker container started"
          docker-compose -f ./compose/postgres-compose.yml up -d
          echo "postgres docker container started"

      - name: Run tests
        run: |
          echo "Running tests"
          cd tests
          pytest --disable-warnings
          test_exit_code=$?

      - name: Clean up
        if: always()
        run: |
          cd tests
          docker-compose -f ./compose/mobius-compose.yml down --remove-orphans
          echo "mobius docker container removed"
          docker-compose -f ./compose/postgres-compose.yml down --remove-orphans
          echo "postgres docker container removed"
          docker volume prune -f
          echo "docker volumes pruned"
          cd ..
          if [ -f .env.bak ]; then
            echo "Restoring .env file"
            mv .env.bak .env
          fi

      - name: Check test results
        if: steps.run-tests.outputs.test_exit_code != 0
        run: |
          echo "Tests failed"
          exit 1